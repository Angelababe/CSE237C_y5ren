#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>
#include <iostream>
#include <math.h>
#include "FM.h"
//typedef float data_t;

float b1[64] = {
	-0.000570976,
	-0.000222011,
	0.000248603,
	0.000792292,
	0.001296806,
	0.001576333,
	0.001410031,
	0.000630176,
	-0.000766216,
	-0.002529942,
	-0.004148569,
	-0.004945903,
	-0.004288253,
	-0.001847815,
	0.002163637,
	0.006889415,
	0.010926623,
	0.012648752,
	0.010697516,
	0.00451942,
	-0.005217876,
	-0.016486934,
	-0.026137589,
	-0.030508014,
	-0.026295276,
	-0.011478651,
	0.013952187,
	0.047684493,
	0.085312171,
	0.121097528,
	0.149111154,
	0.164486888,
	0.164486888,
	0.149111154,
	0.121097528,
	0.085312171,
	0.047684493,
	0.013952187,
	-0.011478651,
	-0.026295276,
	-0.030508014,
	-0.026137589,
	-0.016486934,
	-0.005217876,
	0.00451942,
	0.010697516,
	0.012648752,
	0.010926623,
	0.006889415,
	0.002163637,
	-0.001847815,
	-0.004288253,
	-0.004945903,
	-0.004148569,
	-0.002529942,
	-0.000766216,
	0.000630176,
	0.001410031,
	0.001576333,
	0.001296806,
	0.000792292,
	0.000248603,
	-0.000222011,
	-0.000570976,
	};

float b12[128] = {
		0.000357557,
		0.000290328,
		0.0001934,
		7.00547E-05,
		-7.45156E-05,
		-0.000232369,
		-0.000392174,
		-0.000539043,
		-0.000655073,
		-0.000720719,
		-0.000716994,
		-0.000628312,
		-0.000445658,
		-0.000169621,
		0.000187235,
		0.000599186,
		0.001027771,
		0.001424116,
		0.001733174,
		0.001899654,
		0.001875123,
		0.001625515,
		0.001138107,
		0.000426965,
		-0.000464122,
		-0.001461952,
		-0.002467958,
		-0.003366014,
		-0.004033584,
		-0.004355333,
		-0.004237878,
		-0.003624084,
		-0.00250513,
		-0.000928662,
		0.000998435,
		0.003113635,
		0.005209128,
		0.007048589,
		0.008389295,
		0.009007781,
		0.008726692,
		0.007440124,
		0.005134624,
		0.001903248,
		-0.002049447,
		-0.006412871,
		-0.010786724,
		-0.014707566,
		-0.017683908,
		-0.019237173,
		-0.01894508,
		-0.016483598,
		-0.011663468,
		-0.004457626,
		0.004983521,
		0.016330979,
		0.029091044,
		0.042633629,
		0.05623316,
		0.069118959,
		0.080531074,
		0.08977692,
		0.096283934,
		0.099643698,
		0.099643698,
		0.096283934,
		0.08977692,
		0.080531074,
		0.069118959,
		0.05623316,
		0.042633629,
		0.029091044,
		0.016330979,
		0.004983521,
		-0.004457626,
		-0.011663468,
		-0.016483598,
		-0.01894508,
		-0.019237173,
		-0.017683908,
		-0.014707566,
		-0.010786724,
		-0.006412871,
		-0.002049447,
		0.001903248,
		0.005134624,
		0.007440124,
		0.008726692,
		0.009007781,
		0.008389295,
		0.007048589,
		0.005209128,
		0.003113635,
		0.000998435,
		-0.000928662,
		-0.00250513,
		-0.003624084,
		-0.004237878,
		-0.004355333,
		-0.004033584,
		-0.003366014,
		-0.002467958,
		-0.001461952,
		-0.000464122,
		0.000426965,
		0.001138107,
		0.001625515,
		0.001875123,
		0.001899654,
		0.001733174,
		0.001424116,
		0.001027771,
		0.000599186,
		0.000187235,
		-0.000169621,
		-0.000445658,
		-0.000628312,
		-0.000716994,
		-0.000720719,
		-0.000655073,
		-0.000539043,
		-0.000392174,
		-0.000232369,
		-7.45156E-05,
		7.00547E-05,
		0.0001934,
		0.000290328,
		0.000357557,
};

float b19[128] = {
		0.000707312,
		0.000734131,
		0.000565535,
		0.000219338,
		-0.000233305,
		-0.000679489,
		-0.000991663,
		-0.001066324,
		-0.000863565,
		-0.000431838,
		9.68079E-05,
		0.000546893,
		0.000766182,
		0.000694936,
		0.000406245,
		9.18491E-05,
		-1.23977E-05,
		0.000260313,
		0.000901209,
		0.001678715,
		0.002187326,
		0.001992814,
		0.000829456,
		-0.001228329,
		-0.003702453,
		-0.005806986,
		-0.006694757,
		-0.005779301,
		-0.003011134,
		0.001013644,
		0.005183282,
		0.008220705,
		0.009141745,
		0.007648624,
		0.004290468,
		0.000298293,
		-0.002873597,
		-0.004140818,
		-0.003281366,
		-0.001104733,
		0.000816772,
		0.000798548,
		-0.002149715,
		-0.007685979,
		-0.013968767,
		-0.01811383,
		-0.017194495,
		-0.009472476,
		0.004594655,
		0.02200444,
		0.037764003,
		0.046284918,
		0.043232955,
		0.027230254,
		0.000787376,
		-0.02995415,
		-0.056715436,
		-0.07143404,
		-0.068775991,
		-0.047996216,
		-0.013499155,
		0.026158468,
		0.060584822,
		0.080515109,
		0.080515109,
		0.060584822,
		0.026158468,
		-0.013499155,
		-0.047996216,
		-0.068775991,
		-0.07143404,
		-0.056715436,
		-0.02995415,
		0.000787376,
		0.027230254,
		0.043232955,
		0.046284918,
		0.037764003,
		0.02200444,
		0.004594655,
		-0.009472476,
		-0.017194495,
		-0.01811383,
		-0.013968767,
		-0.007685979,
		-0.002149715,
		0.000798548,
		0.000816772,
		-0.001104733,
		-0.003281366,
		-0.004140818,
		-0.002873597,
		0.000298293,
		0.004290468,
		0.007648624,
		0.009141745,
		0.008220705,
		0.005183282,
		0.001013644,
		-0.003011134,
		-0.005779301,
		-0.006694757,
		-0.005806986,
		-0.003702453,
		-0.001228329,
		0.000829456,
		0.001992814,
		0.002187326,
		0.001678715,
		0.000901209,
		0.000260313,
		-1.23977E-05,
		9.18491E-05,
		0.000406245,
		0.000694936,
		0.000766182,
		0.000546893,
		9.68079E-05,
		-0.000431838,
		-0.000863565,
		-0.001066324,
		-0.000991663,
		-0.000679489,
		-0.000233305,
		0.000219338,
		0.000565535,
		0.000734131,
		0.000707312,
};

float b38[128] = {
		0.000676575,
		0.000615122,
		-6.53733E-05,
		-0.000783153,
		-0.000833021,
		-7.85458E-05,
		0.000830907,
		0.001019985,
		0.000256729,
		-0.000753108,
		-0.001040369,
		-0.00037674,
		0.000490414,
		0.00069482,
		0.000243304,
		-7.4109E-05,
		0.000187954,
		0.000403848,
		-0.000319475,
		-0.001626563,
		-0.001772993,
		0.000394539,
		0.00339253,
		0.003858737,
		0.000138907,
		-0.005011543,
		-0.006306895,
		-0.001369969,
		0.005894895,
		0.008386494,
		0.002998157,
		-0.005580393,
		-0.009121422,
		-0.004247046,
		0.004004396,
		0.007575175,
		0.003955547,
		-0.001692736,
		-0.003213264,
		-0.000862844,
		-0.000232795,
		-0.003781985,
		-0.005974868,
		0.000280906,
		0.012376068,
		0.016764123,
		0.00298539,
		-0.020812555,
		-0.030704336,
		-0.010446111,
		0.027008937,
		0.045991577,
		0.022009391,
		-0.029120835,
		-0.060137657,
		-0.036441637,
		0.026105615,
		0.07054016,
		0.05153136,
		-0.018099854,
		-0.075146469,
		-0.064568268,
		0.006473806,
		0.073010952,
		0.073010952,
		0.006473806,
		-0.064568268,
		-0.075146469,
		-0.018099854,
		0.05153136,
		0.07054016,
		0.026105615,
		-0.036441637,
		-0.060137657,
		-0.029120835,
		0.022009391,
		0.045991577,
		0.027008937,
		-0.010446111,
		-0.030704336,
		-0.020812555,
		0.00298539,
		0.016764123,
		0.012376068,
		0.000280906,
		-0.005974868,
		-0.003781985,
		-0.000232795,
		-0.000862844,
		-0.003213264,
		-0.001692736,
		0.003955547,
		0.007575175,
		0.004004396,
		-0.004247046,
		-0.009121422,
		-0.005580393,
		0.002998157,
		0.008386494,
		0.005894895,
		-0.001369969,
		-0.006306895,
		-0.005011543,
		0.000138907,
		0.003858737,
		0.00339253,
		0.000394539,
		-0.001772993,
		-0.001626563,
		-0.000319475,
		0.000403848,
		0.000187954,
		-7.4109E-05,
		0.000243304,
		0.00069482,
		0.000490414,
		-0.00037674,
		-0.001040369,
		-0.000753108,
		0.000256729,
		0.001019985,
		0.000830907,
		-7.85458E-05,
		-0.000833021,
		-0.000783153,
		-6.53733E-05,
		0.000615122,
		0.000676575,
};

void stereo(data_t* xi, data_t* xr, data_t*y){
	int N1 = 10;

	int SIZE=128;

	lfilter(b1, xi, SIZE);
	lfilter(b1, xr, SIZE);

	downsample(xi, N1, SIZE);
	downsample(xr, N1, SIZE);

	SIZE = SIZE/N1;

	data_t* disdata;
	disdata = new data_t[SIZE];
	discrim(xi, xr, disdata, SIZE);


	data_t* y_lpr;
	//data_t* zbb19;
	data_t* x_lmr;
	data_t* xtemp = disdata;
	y_lpr = new data_t[SIZE];
	//zbb19 = (data_t *)malloc(sizeof(disdata));
	x_lmr = new data_t[SIZE];
	for(int i=0; i<SIZE; i++){
		y_lpr[i] = disdata[i];
		x_lmr[i] = disdata[i];
	}


	lfilter(b12, y_lpr, SIZE);
	//lfilter(b19, zbb19);
	lfilter(b38, x_lmr, SIZE);

	lfilter(b12, x_lmr, SIZE);


	data_t* y_left;
	data_t* y_right;
	y_left=new data_t[SIZE];
	y_right=new data_t[SIZE];
	for(int i=0; i<SIZE; i++){
		y_left[i] = y_lpr[i] + x_lmr[i];
		y_right[i] = y_lpr[i] - x_lmr[i];
	}

	int N2=5;
	downsample(y_left, N2, SIZE);
	downsample(y_right, N2, SIZE);

	SIZE = SIZE/5;
	printf("%d\n", SIZE);
//	y = new data_t[2][sizeof(y_left)];
	for(int i=0; i<SIZE; i++){
		*y = y_left[i];
		y++;
		*y = y_right[i];
		y++;
	}
}

/*void mfm(data_t* xi, data_t* xr, data_t* y){

}*/

void downsample(data_t* x, int M, int SIZE){
	int size = SIZE/M;
	data_t* x1 = x;
	data_t* x2 = x;
	data_t temp;
	for(int i=0; i<SIZE; i+=size){
		temp = *x2;
		*x1 = temp;
		x1++;
		x2+=size;
	}
}


void lfilter(float* b, data_t* x, int SIZE){
	//generated from signal.firwin();
	data_t *y, *buff;
	y = new data_t[SIZE];
	buff = new data_t[sizeof(b)];
	for(int i=0; i<sizeof(b); i++){
		buff[i] = 0;
	}
	data_t* y1;
	for(int i=0; i<SIZE; i++){
		y[i] = 0;
	}
	data_t temp;
	for(int i=0; i<SIZE; i++){
		for(int j=0; j<sizeof(b)-1; j++){
			buff[sizeof(buff)-1-j] = buff[sizeof(buff)-2-j];
		}
		buff[0] = x[i];
		temp = 0;
		for (int j=0; j<sizeof(b); j++){
			temp+=buff[j]*b[j];
		}
		y[i] = temp;
	}
	for(int i=0; i<SIZE; i++){
		x[i] = y[i];
	}
}

void discrim(data_t *xI, data_t* xQ, data_t* disdata, int SIZE){
	// x is the received signal in complex baseband form
	// Mark Wickert
	float b[2] = {1, -1};
	// a for discrete derivative
	data_t* der_xI=new data_t[SIZE];
	for(int i=0; i<sizeof(xI);i++){
		der_xI[i] = xI[i];
	}
	lfilter(b,der_xI, SIZE);
	data_t* der_xQ=new data_t[SIZE];
	for(int i=0; i<sizeof(xI);i++){
		der_xQ[i] = xQ[i];
	}
	lfilter(b,der_xQ, SIZE);
	// normalize by the squared envelop acts as a limiter
	for(int i=0; i<SIZE; i++){
		disdata[i] = (xI[i]*der_xQ[i]-xQ[i]*der_xI[i])/(xI[i]*xI[i]+xQ[i]*xQ[i]);
	}
}

/*void pilot_PLL(data_t* xr){
	float fq = 10000;
	float fs = 240000;
	float loop_type = 2;
	float Bn = 10;
	float zeta = 0.707;
	float T = 1/fs;
	float Kv = 1;
	float Norder = 5;

}*/




